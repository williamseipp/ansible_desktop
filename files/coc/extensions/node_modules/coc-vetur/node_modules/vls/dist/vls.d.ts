import { TextEdit, CompletionList, CompletionItem, Hover, DocumentHighlight, Definition, Location, DocumentLink, SymbolInformation, ColorInformation, ColorPresentation, SignatureHelp, FoldingRange, CodeAction, WorkspaceEdit, Diagnostic } from 'vscode-languageserver-types';
import { CancellationToken, Connection, InitializeParams, DocumentFormattingParams, CompletionParams, TextDocumentPositionParams, DocumentLinkParams, DocumentSymbolParams, DocumentColorParams, ColorPresentationParams, FoldingRangeParams, CodeActionParams, ExecuteCommandParams, ServerCapabilities } from 'vscode-languageserver';
import { TextDocument } from 'vscode-languageserver-textdocument';
import { CancellationToken as CancellationToken$1 } from 'typescript';

interface RefactorAction {
    fileName: string;
    formatOptions: any;
    textRange: {
        pos: number;
        end: number;
    };
    refactorName: string;
    actionName: string;
    preferences: {};
    description: string;
}

interface VLSConfig {
    vetur: {
        useWorkspaceDependencies: boolean;
        completion: {
            autoImport: boolean;
            tagCasing: 'initial' | 'kebab';
            scaffoldSnippetSources: {
                workspace: string;
                user: string;
                vetur: string;
            };
        };
        grammar: {
            customBlocks: {
                [lang: string]: string;
            };
        };
        validation: {
            template: boolean;
            templateProps: boolean;
            interpolation: boolean;
            style: boolean;
            script: boolean;
        };
        format: {
            enable: boolean;
            options: {
                tabSize: number;
                useTabs: boolean;
            };
            defaultFormatter: {
                [lang: string]: string;
            };
            defaultFormatterOptions: {
                [lang: string]: {};
            };
            scriptInitialIndent: boolean;
            styleInitialIndent: boolean;
        };
        languageFeatures: {
            codeActions: boolean;
        };
        trace: {
            server: 'off' | 'messages' | 'verbose';
        };
        dev: {
            vlsPath: string;
            vlsPort: number;
            logLevel: 'INFO' | 'DEBUG';
        };
        experimental: {
            templateInterpolationService: boolean;
        };
    };
}

interface VCancellationToken extends CancellationToken {
    tsToken: CancellationToken$1;
}

declare class VLS {
    private lspConnection;
    private workspacePath;
    private documentService;
    private vueInfoService;
    private dependencyService;
    private languageModes;
    private pendingValidationRequests;
    private cancellationTokenValidationRequests;
    private validationDelayMs;
    private validation;
    private templateInterpolationValidation;
    private documentFormatterRegistration;
    private config;
    constructor(lspConnection: Connection);
    init(params: InitializeParams): Promise<{
        capabilities: {};
    } | undefined>;
    listen(): void;
    private getFullConfig;
    private setupConfigListeners;
    private setupLSPHandlers;
    private setupCustomLSPHandlers;
    private setupDynamicFormatters;
    private setupFileChangeListeners;
    configure(config: VLSConfig): void;
    /**
     * Custom Notifications
     */
    displayInfoMessage(msg: string): void;
    displayWarningMessage(msg: string): void;
    displayErrorMessage(msg: string): void;
    /**
     * Language Features
     */
    onDocumentFormatting({ textDocument, options }: DocumentFormattingParams): TextEdit[];
    private toSimpleRange;
    onCompletion({ textDocument, position, context }: CompletionParams): CompletionList;
    onCompletionResolve(item: CompletionItem): CompletionItem;
    onHover({ textDocument, position }: TextDocumentPositionParams): Hover;
    onDocumentHighlight({ textDocument, position }: TextDocumentPositionParams): DocumentHighlight[];
    onDefinition({ textDocument, position }: TextDocumentPositionParams): Definition;
    onReferences({ textDocument, position }: TextDocumentPositionParams): Location[];
    onDocumentLinks({ textDocument }: DocumentLinkParams): DocumentLink[];
    onDocumentSymbol({ textDocument }: DocumentSymbolParams): SymbolInformation[];
    onDocumentColors({ textDocument }: DocumentColorParams): ColorInformation[];
    onColorPresentations({ textDocument, color, range }: ColorPresentationParams): ColorPresentation[];
    onSignatureHelp({ textDocument, position }: TextDocumentPositionParams): SignatureHelp | null;
    onFoldingRanges({ textDocument }: FoldingRangeParams): FoldingRange[];
    onCodeAction({ textDocument, range, context }: CodeActionParams): CodeAction[];
    getRefactorEdits(refactorAction: RefactorAction): WorkspaceEdit | undefined;
    private triggerValidation;
    cancelPastValidation(textDocument: TextDocument): void;
    cleanPendingValidation(textDocument: TextDocument): void;
    validateTextDocument(textDocument: TextDocument, cancellationToken?: VCancellationToken): Promise<void>;
    doValidate(doc: TextDocument, cancellationToken?: VCancellationToken): Promise<Diagnostic[] | null>;
    executeCommand(arg: ExecuteCommandParams): Promise<void>;
    removeDocument(doc: TextDocument): void;
    dispose(): void;
    get capabilities(): ServerCapabilities;
}

export { VLS };
